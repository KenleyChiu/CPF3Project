function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 16-May-2021 15:56:04.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx6 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx6 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1939;8e-05;0.0084;-11.92;1;1];
x1_step1.gain = [5.25472268201046e-05;2.35454780931502e-06;0.00102643501260154;0.0625390869293308;0.166666666666667;0.333333333333333];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.3896610303486260918;1.1662973546191841567;1.3150249340714816881;-0.24817999155327283289;-0.92266523994160010158;-0.98792912071860239376;-0.19973731513526743475;-1.0603419578999953021;-0.96901173919292948877;-2.1658414181362672934];
IW1_1 = [0.29219564609143672262 -1.2966646657117189001 -1.0323579777961067183 1.9554603790011548803 -0.20497790713984975763 1.1801295563042137893;-1.2156036857818610653 -0.77880285776086177751 -1.397630477253575032 1.2449843833963720741 1.2116550910106469452 -0.091702965625342566791;-0.92195274877754340714 -0.74228303037161680322 0.81664744545822287591 -3.5963487726105638487 -0.37837798552092816173 -0.015759644702248276626;1.0117974576691013411 -1.6619275284688406202 -1.4604491637005645455 1.4942499734997334304 0.035112783645276729461 -1.6050467598426638727;0.22490575673694102043 -0.21289854102863717267 -2.9355881289718510629 2.0972031220551197173 -0.46715008257151197091 -0.016353347109616972466;2.0041229334921286664 -1.6916654028584940939 -1.0813107584995598209 2.4204933814458762242 1.221002910204963543 1.2140191276378724528;-2.7267840360648869513 0.31912415133616467422 1.1508920856998328119 -2.5535065499172255876 1.3374712014892631284 -2.2872157497233507328;-1.1333116325054897189 2.3813323437993747511 -2.2397440151700207522 -2.8532891610236204016 0.3762260076203543524 0.23803178021477031101;-1.3895622301376935326 1.3103409336697093845 1.6326907989032342083 -0.58471803022427804031 0.067895436540550635485 -0.79673687685581917606;-1.7601994895253219031 -0.58262944724744092362 1.8078233915602011095 0.35787038177121421878 -1.5777142761723141895 -1.5980834168263688966];

% Layer 2
b2 = [-0.40974948024758972576;-0.25432740703815753802;-0.46108367745369110979;-1.3153904933381184161;-0.047201701370720938744;1.6125952408727202148];
LW2_1 = [-0.025518050914998015311 -0.39414200244592101363 -6.2841618798333298557 1.2361147504920078077 0.87849652913686882005 -0.86882557571173835154 -0.60877403578181621402 -1.0691476509516606441 -0.84017767272031562698 1.3585822307931207931;0.047009273947443523667 -0.77902675158992407134 -0.45709309304705658672 0.98770999954095739515 0.84209921407850163444 -2.0349743134042719284 2.3774468417174747792 -1.055018454099968972 0.0687056719118437631 1.9555660639862011418;-1.8654792723613418115 0.30333854366789608781 -2.0784930172213207378 1.9531557349932660017 1.2775459146084557904 1.9392900880996220003 -2.9358562983253713163 -3.2303369476248153802 1.2200977503447594241 -1.9532657426056736494;0.061673778113283020397 0.64002421549034016479 2.2669158357144749694 1.6890611811885902771 2.194810599817704766 2.2349285634612865437 1.2533366974434785313 0.5037617961658125143 0.79475242132543366669 -2.1688840049428042001;0.60074943357781929176 1.5096712798332361238 0.66605608520021641894 -2.8553374170044034663 1.3140035823376456925 -1.9716979455094916229 -0.91457918708136365371 6.8687586803997664475 -1.2873902054758177282 1.0699212127423129992;-0.67802139512221981654 0.39285201530902769118 3.3711912190454773608 -2.6947300115915351348 -5.7883984953280105401 -1.5203016429654510056 0.2661306073748813672 -0.40983713070960670066 0.33568867245945649413 -0.59015496410163958974];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
